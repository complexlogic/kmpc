cmake_minimum_required(VERSION 3.18)
project("Kodi M3U Playlist Converter" 
  LANGUAGES CXX 
  VERSION 1.0
)
set(CMAKE_CXX_STANDARD 20)
set(EXECUTABLE_TITLE "kmpc")
option(USE_QT6 "Use Qt6 instead of Qt5 OFF")
if (WIN32 OR APPLE)
  set(USE_QT6 ON)
endif ()
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

if (USE_QT6)
  find_package(Qt6 REQUIRED COMPONENTS Gui Widgets)
else ()
  find_package(Qt5 REQUIRED COMPONENTS Gui Widgets)
endif ()

# Find dependencies
find_package(Qt6 REQUIRED COMPONENTS Widgets)
if (UNIX)
  find_package(PkgConfig MODULE REQUIRED)
  pkg_check_modules(FMT REQUIRED IMPORTED_TARGET fmt)
  pkg_check_modules(SQLITE3 REQUIRED IMPORTED_TARGET sqlite3)
elseif (WIN32)
  find_path(FMT_INCLUDE_DIR "fmt/core.h" REQUIRED)
  find_library(FMT fmt REQUIRED)
  find_path(SQLITE3_INCLUDE_DIR "sqlite3.h" REQUIRED)
  find_library(SQLITE3 sqlite3 REQUIRED)
  find_package(QT6Gui CONFIG REQUIRED)
  find_package(QT6Widgets CONFIG REQUIRED)
endif ()

if (WIN32)
  set(VERSION_M ${PROJECT_VERSION_MAJOR})
  set(VERSION_N ${PROJECT_VERSION_MINOR})
  if (PROJECT_VERSION_PATCH)
    set(VERSION_O ${PROJECT_VERSION_PATCH})
  else ()
    set(VERSION_O 0)
  endif()
  if (PROJECT_VERSION_TWEAK)
    set(VERSION_P ${PROJECT_VERSION_TWEAK})
  else ()
    set(VERSION_P 0)
  endif()
  configure_file(${PROJECT_SOURCE_DIR}/config/${EXECUTABLE_TITLE}.manifest.in ${PROJECT_BINARY_DIR}/${EXECUTABLE_TITLE}.manifest)
endif()

add_subdirectory("src")

# Installation
if (UNIX)
  install(TARGETS ${EXECUTABLE_TITLE} DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
  if (NOT APPLE)
    install(FILES ${PROJECT_SOURCE_DIR}/config/kmpc.desktop DESTINATION ${CMAKE_INSTALL_PREFIX}/share/applications)
    install(FILES ${PROJECT_SOURCE_DIR}/config/kmpc.png DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/48x48/apps)
    install(FILES ${PROJECT_SOURCE_DIR}/config/kmpc.svg DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps)
  endif ()
  configure_file("${PROJECT_SOURCE_DIR}/config/uninstall.cmake.in" "${PROJECT_BINARY_DIR}/uninstall.cmake" IMMEDIATE @ONLY)
  add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${PROJECT_BINARY_DIR}/uninstall.cmake)

elseif (WIN32)
  install(DIRECTORY ${PROJECT_BINARY_DIR}/$<CONFIG>/ DESTINATION ".")
    configure_file("${PROJECT_SOURCE_DIR}/CHANGELOG" "${PROJECT_BINARY_DIR}/CHANGELOG.txt")
    install(FILES "${PROJECT_BINARY_DIR}/CHANGELOG.txt" DESTINATION ".")

  # Copy the Visual C++ runtime DLLs in case user doesn't have them installed
  set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP TRUE)
  include(InstallRequiredSystemLibraries)
  foreach(required_lib "vcruntime140.dll" "vcruntime140_1.dll" "msvcp140.dll" "msvcp140_1.dll" "msvcp140_2.dll")
    foreach(system_lib ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS})
      string(FIND ${system_lib} ${required_lib} found_lib)
      if (NOT found_lib EQUAL -1)
        install(FILES ${system_lib} DESTINATION ".")
      endif ()
    endforeach ()
  endforeach ()
  
  # Set up CPack
  set(CPACK_PACKAGE_NAME ${EXECUTABLE_TITLE})
  set(CPACK_GENERATOR "ZIP")
  include(CPack)
endif ()
